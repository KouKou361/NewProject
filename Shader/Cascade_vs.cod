//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 lightDirection;             // Offset:   64 Size:    16 [unused]
//
// }
//
// cbuffer CbMesh
// {
//
//   row_major float4x4 boneTransforms[128];// Offset:    0 Size:  8192
//
// }
//
// cbuffer CbSubset
// {
//
//   float4 materialColor;              // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
// CbMesh                            cbuffer      NA          NA            cb1      1 
// CbSubset                          cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyz         2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float       
// WEIGHTS                  0   xyzw        5     NONE   float   xyzw
// BONES                    0   xyzw        6     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 2   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float       
// NORMAL                   0   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
// TEXCOORD                 7   xyz         8     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[512], dynamicIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v3.xy
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_output o8.xyz
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
//   v1.x <- input.normal.x; v1.y <- input.normal.y; v1.z <- input.normal.z; 
//   v2.x <- input.tangent.x; v2.y <- input.tangent.y; v2.z <- input.tangent.z; 
//   v3.x <- input.texcoord.x; v3.y <- input.texcoord.y; 
//   v4.x <- input.color.x; v4.y <- input.color.y; v4.z <- input.color.z; v4.w <- input.color.w; 
//   v5.x <- input.boneWeights.x; v5.y <- input.boneWeights.y; v5.z <- input.boneWeights.z; v5.w <- input.boneWeights.w; 
//   v6.x <- input.boneIndices.x; v6.y <- input.boneIndices.y; v6.z <- input.boneIndices.z; v6.w <- input.boneIndices.w; 
//   o4.x <- <main return value>.vShadow.x; o4.y <- <main return value>.vShadow.y; o4.z <- <main return value>.vShadow.z; 
//   o8.x <- <main return value>.VZ.x; o8.y <- <main return value>.VZ.y; o8.z <- <main return value>.VZ.z; 
//   o7.x <- <main return value>.VY.x; o7.y <- <main return value>.VY.y; o7.z <- <main return value>.VY.z; 
//   o6.x <- <main return value>.VX.x; o6.y <- <main return value>.VX.y; o6.z <- <main return value>.VX.z; 
//   o5.x <- <main return value>.normal.x; o5.y <- <main return value>.normal.y; o5.z <- <main return value>.normal.z; 
//   o3.x <- <main return value>.color.x; o3.y <- <main return value>.color.y; o3.z <- <main return value>.color.z; o3.w <- <main return value>.color.w; 
//   o2.x <- <main return value>.texcoord.x; o2.y <- <main return value>.texcoord.y; 
//   o1.x <- <main return value>.Wposition.x; o1.y <- <main return value>.Wposition.y; o1.z <- <main return value>.Wposition.z; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 6 "C:\Users\taketomo\Desktop\GithubGameProgram\Shader\Cascade_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z

#line 7
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z

#line 8
mov r0.w, l(0)  // r0.w <- i
mov r2.xyz, r1.xyzx  // r2.x <- n.x; r2.y <- n.y; r2.z <- n.z
mov r3.x, r0.x  // r3.x <- p.x
mov r3.y, r0.y  // r3.y <- p.y
mov r3.z, r0.z  // r3.z <- p.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.w, r1.w, l(4)
  breakc_z r2.w

#line 10
  dp4 r2.w, v5.xyzw, icb[r1.w + 0].xyzw
  and r4.xyzw, v6.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r3.w, r4.y, r4.x
  imul null, r3.w, r3.w, l(4)
  mul r4.xyz, v0.xxxx, cb1[r3.w + 0].xyzx
  mul r5.xyz, v0.yyyy, cb1[r3.w + 1].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r5.xyz, v0.zzzz, cb1[r3.w + 2].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r5.xyz, v0.wwww, cb1[r3.w + 3].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r3.xyz, r4.xyzx, r3.xyzx

#line 11
  dp4 r2.w, v5.xyzw, icb[r1.w + 0].xyzw
  itof r3.w, l(0)
  and r4.xyzw, v6.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r4.x, r4.y, r4.x
  imul null, r4.x, r4.x, l(4)
  mul r4.yzw, v1.xxxx, cb1[r4.x + 0].xxyz
  mul r5.xyz, v1.yyyy, cb1[r4.x + 1].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, v1.zzzz, cb1[r4.x + 2].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, r3.wwww, cb1[r4.x + 3].xyzx
  add r4.xyz, r4.yzwy, r5.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r2.xyz, r2.xyzx, r4.xyzx

#line 12
  iadd r1.w, r1.w, l(1)
endloop 

#line 15
mov r2.xyz, r2.xyzx  // r2.x <- VZ.x; r2.y <- VZ.y; r2.z <- VZ.z

#line 16
itof r0.yz, l(0, 0, 1, 0)  // r0.y <- VY.x; r0.z <- VY.y
mov r0.x, l(0.001000)  // r0.x <- VY.z

#line 18
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx

#line 19
mul r1.xyz, r2.zxyz, r0.zxyz
mul r0.xyz, r2.yzxy, r0.xyzx
mov r0.xyz, -r0.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- VX.x; r0.y <- VX.y; r0.z <- VX.z

#line 20
mul r1.xyz, r0.zxyz, r2.yzxy
mul r4.xyz, r0.yzxy, r2.zxyz
mov r4.xyz, -r4.xyzx
add r1.xyz, r1.xyzx, r4.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- VY.x; r1.y <- VY.y; r1.z <- VY.z

#line 24
mov r0.xyz, r0.xyzx  // r0.x <- output.VX.x; r0.y <- output.VX.y; r0.z <- output.VX.z

#line 25
mov r1.xyz, r1.xyzx  // r1.x <- output.VY.x; r1.y <- output.VY.y; r1.z <- output.VY.z

#line 26
mov r4.xyz, r2.xyzx  // r4.x <- output.VZ.x; r4.y <- output.VZ.y; r4.z <- output.VZ.z

#line 29
mul r5.xyzw, r3.xxxx, cb0[0].xyzw
mul r6.xyzw, r3.yyyy, cb0[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, r3.zzzz, cb0[2].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r5.xyzw, r5.xyzw, r6.xyzw  // r5.x <- output.position.x; r5.y <- output.position.y; r5.z <- output.position.z; r5.w <- output.position.w

#line 31
mov r3.x, r3.x  // r3.x <- output.Wposition.x
mov r3.y, r3.y  // r3.y <- output.Wposition.y
mov r3.z, r3.z  // r3.z <- output.Wposition.z

#line 32
mov r6.xyzw, cb2[0].xyzw  // r6.x <- output.color.x; r6.y <- output.color.y; r6.z <- output.color.z; r6.w <- output.color.w

#line 33
mov r2.xyz, r2.xyzx  // r2.x <- output.normal.x; r2.y <- output.normal.y; r2.z <- output.normal.z

#line 34
mov r7.xy, v3.xyxx  // r7.x <- output.texcoord.x; r7.y <- output.texcoord.y

#line 38
mov o0.xyzw, r5.xyzw
mov o3.xyzw, r6.xyzw
mov o1.xyz, r3.xyzx
mov o5.xyz, r2.xyzx
mov o6.xyz, r0.xyzx
mov o7.xyz, r1.xyzx
mov o8.xyz, r4.xyzx
mov o2.xy, r7.xyxx
ret 
// Approximately 87 instruction slots used
