//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SceneConstant
// {
//
//   float4 Color;                      // Offset:    0 Size:    16 [unused]
//   float LineWeight;                  // Offset:   16 Size:     4
//   float LineDark;                    // Offset:   20 Size:     4
//   float dummy;                       // Offset:   24 Size:     4 [unused]
//   float dummy2;                      // Offset:   28 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SceneConstant                     cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float    y  
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             1         1  ( FLT, FLT, FLT, FLT)
//
//
// Level9 shader bytecode:
//
    ps_2_x
    def c1, -1, 1, 0, 0
    dcl t0.xy  // input<4,5>

#line 9 "C:\Users\taketomo\Desktop\GameProgram\Shader\TargetScreen_ps.hlsl"
    mul r0.w, t0.y, c0.y  // ::weight<0>
    add r0.x, r0.w, c1.x
    cmp r0.x, r0.x, c1.y, r0.w
    mov r0.x, -r0.x
    add r0.x, r0.x, c1.y  // ::weight<0>
    mul r0.x, r0.x, c0.x  // ::weight<0>
    mul r0, r0.x, c1.yzzy  // ::color<0,1,2,3>

#line 15
    mov r1.w, -t0.y
    add r1.x, r1.w, c1.y
    mul r1.x, r1.x, c0.y  // ::weight<0>
    add r1.y, r1.x, c1.x
    cmp r1.x, r1.y, c1.y, r1.x
    mov r1.x, -r1.x
    add r1.x, r1.x, c1.y  // ::weight<0>
    mul r1.x, r1.x, c0.x  // ::weight<0>
    mul r0, r0, r1.x  // ::color<0,1,2,3>

#line 33
    mov r0, r0  // ::main<0,1,2,3>

#line 2
    mov oC0, r0  // ::main<0,1,2,3>

// approximately 18 instruction slots used
ps_4_0
dcl_constantbuffer CB0[2], immediateIndexed
dcl_input_ps linear v1.y
dcl_output o0.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
//   v1.x <- input.tex.x; v1.y <- input.tex.y; 
//   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 5 "C:\Users\taketomo\Desktop\GameProgram\Shader\TargetScreen_ps.hlsl"
itof r0.xyzw, l(1, 0, 0, 1)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 9
mul r1.x, v1.y, cb0[1].y  // r1.x <- weight

#line 10
itof r1.y, l(1)
itof r1.z, l(1)
min r1.x, r1.z, r1.x
mov r1.x, -r1.x
add r1.x, r1.x, r1.y  // r1.x <- weight

#line 11
mul r1.x, r1.x, cb0[1].x

#line 12
mul r0.xyzw, r0.xyzw, r1.xxxx

#line 15
itof r1.x, l(1)
mov r1.y, -v1.y
add r1.x, r1.y, r1.x
mul r1.x, r1.x, cb0[1].y  // r1.x <- weight

#line 16
itof r1.y, l(1)
itof r1.z, l(1)
min r1.x, r1.z, r1.x
mov r1.x, -r1.x
add r1.x, r1.x, r1.y  // r1.x <- weight

#line 17
mul r1.x, r1.x, cb0[1].x

#line 18
mul r0.xyzw, r0.xyzw, r1.xxxx

#line 33
mov o0.xyzw, r0.xyzw
ret 
// Approximately 22 instruction slots used
