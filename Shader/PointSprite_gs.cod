//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerFrame
// {
//
//   float4x4 View;                     // Offset:    0 Size:    64
//   float4x4 Projection;               // Offset:   64 Size:    64
//   float2 TextureSize;                // Offset:  128 Size:     8
//   float2 TextureNum;                 // Offset:  136 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerFrame                        cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TANGENT                  0   xyzw        2     NONE   float   x   
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TETCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
gs_4_0
dcl_constantbuffer CB0[9], immediateIndexed
dcl_input v[1][0].xyz
dcl_input v[1][1].xy
dcl_input v[1][2].xyzw
dcl_input v[1][3].xyzw
dcl_temps 8
dcl_inputprimitive point 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_maxout 4
//
// Initial variable locations:
//   m0 <- ParticleStream; 
//   v[0][0].x <- In[0].Position.x; v[0][0].y <- In[0].Position.y; v[0][0].z <- In[0].Position.z; 
//   v[0][1].x <- In[0].Size.x; v[0][1].y <- In[0].Size.y; 
//   v[0][2].x <- In[0].Tex.x; v[0][2].y <- In[0].Tex.y; v[0][2].z <- In[0].Tex.z; v[0][2].w <- In[0].Tex.w; 
//   v[0][3].x <- In[0].Color.x; v[0][3].y <- In[0].Color.y; v[0][3].z <- In[0].Color.z; v[0][3].w <- In[0].Color.w
//
#line 9 "C:\Users\taketomo\Desktop\GameProgram\Shader\PointSprite_gs.hlsl"
mul r0.xyzw, cb0[0].xyzw, v[0][0].xxxx
mul r1.xyzw, cb0[1].xyzw, v[0][0].yyyy
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[2].xyzw, v[0][0].zzzz
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- pos.x; r0.y <- pos.y; r0.z <- pos.z; r0.w <- pos.w

#line 11
mov r1.x, v[0][1].x  // r1.x <- w

#line 12
mov r1.z, v[0][1].y  // r1.z <- h

#line 14
mov r1.y, -r1.x
mov r1.w, l(0)
add r2.xyzw, r0.xyzw, r1.yzww  // r2.x <- pos_left_top.x; r2.y <- pos_left_top.y; r2.z <- pos_left_top.z; r2.w <- pos_left_top.w

#line 15
mov r3.x, -r1.x
mov r3.y, -r1.z
mov r3.zw, l(0,0,0,0)
add r3.xyzw, r0.xyzw, r3.xyzw  // r3.x <- pos_left_bottom.x; r3.y <- pos_left_bottom.y; r3.z <- pos_left_bottom.z; r3.w <- pos_left_bottom.w

#line 16
add r4.xyzw, r0.xyzw, r1.xzww  // r4.x <- pos_right_top.x; r4.y <- pos_right_top.y; r4.z <- pos_right_top.z; r4.w <- pos_right_top.w

#line 17
mov r5.y, -r1.z
mov r5.xzw, r1.xxww
add r0.xyzw, r0.xyzw, r5.xyzw  // r0.x <- pos_right_bottom.x; r0.y <- pos_right_bottom.y; r0.z <- pos_right_bottom.z; r0.w <- pos_right_bottom.w

#line 21
ftoi r1.x, v[0][2].x  // r1.x <- type

#line 23
ftoi r1.y, cb0[8].z
ineg r1.z, r1.x
ineg r1.w, r1.y
and r5.x, r1.x, l(0x80000000)
imax r1.z, r1.x, r1.z
imax r1.y, r1.y, r1.w
udiv null, r1.y, r1.z, r1.y
ineg r1.z, r1.y
ine r1.w, l(0, 0, 0, 0), r5.x
movc r1.y, r1.w, r1.z, r1.y
itof r1.y, r1.y
mul r5.x, r1.y, cb0[8].x  // r5.x <- u

#line 24
ftoi r1.y, cb0[8].w
ineg r1.z, r1.x
ineg r1.w, r1.y
xor r5.z, r1.y, r1.x
imax r1.x, r1.x, r1.z
imax r1.y, r1.y, r1.w
udiv r1.x, null, r1.x, r1.y
ineg r1.y, r1.x
and r1.z, r5.z, l(0x80000000)
ine r1.z, l(0, 0, 0, 0), r1.z
movc r1.x, r1.z, r1.y, r1.x
itof r1.x, r1.x
mul r5.y, r1.x, cb0[8].y  // r5.y <- v

#line 26
mov r1.xyzw, v[0][3].xyzw  // r1.x <- Out.Color.x; r1.y <- Out.Color.y; r1.z <- Out.Color.z; r1.w <- Out.Color.w

#line 29
mul r6.xyzw, r2.xxxx, cb0[4].xyzw
mul r7.xyzw, r2.yyyy, cb0[5].xyzw
add r6.xyzw, r6.xyzw, r7.xyzw
mul r7.xyzw, r2.zzzz, cb0[6].xyzw
add r6.xyzw, r6.xyzw, r7.xyzw
mul r2.xyzw, r2.wwww, cb0[7].xyzw
add r2.xyzw, r2.xyzw, r6.xyzw  // r2.x <- Out.Position.x; r2.y <- Out.Position.y; r2.z <- Out.Position.z; r2.w <- Out.Position.w

#line 30
mov r5.x, r5.x  // r5.x <- Out.Tex.x
mov r5.y, r5.y  // r5.y <- Out.Tex.y

#line 31
mov o0.xyzw, r2.xyzw
mov o1.xy, r5.xyxx
mov o2.xyzw, r1.xyzw
emit 

#line 33
mul r2.xyzw, r4.xxxx, cb0[4].xyzw
mul r6.xyzw, r4.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, r6.xyzw
mul r6.xyzw, r4.zzzz, cb0[6].xyzw
add r2.xyzw, r2.xyzw, r6.xyzw
mul r4.xyzw, r4.wwww, cb0[7].xyzw
add r2.xyzw, r2.xyzw, r4.xyzw  // r2.x <- Out.Position.x; r2.y <- Out.Position.y; r2.z <- Out.Position.z; r2.w <- Out.Position.w

#line 34
add r4.x, r5.x, cb0[8].x  // r4.x <- Out.Tex.x
mov r4.y, r5.y  // r4.y <- Out.Tex.y

#line 35
mov o0.xyzw, r2.xyzw
mov o1.xy, r4.xyxx
mov o2.xyzw, r1.xyzw
emit 

#line 38
mul r2.xyzw, r3.xxxx, cb0[4].xyzw
mul r4.xyzw, r3.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, r4.xyzw
mul r4.xyzw, r3.zzzz, cb0[6].xyzw
add r2.xyzw, r2.xyzw, r4.xyzw
mul r3.xyzw, r3.wwww, cb0[7].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- Out.Position.x; r2.y <- Out.Position.y; r2.z <- Out.Position.z; r2.w <- Out.Position.w

#line 40
add r3.y, r5.y, cb0[8].y  // r3.y <- Out.Tex.y
mov r3.x, r5.x  // r3.x <- Out.Tex.x

#line 41
mov o0.xyzw, r2.xyzw
mov o1.xy, r3.xyxx
mov o2.xyzw, r1.xyzw
emit 

#line 44
mul r2.xyzw, r0.xxxx, cb0[4].xyzw
mul r3.xyzw, r0.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r0.zzzz, cb0[6].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r0.xyzw, r0.wwww, cb0[7].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- Out.Position.x; r0.y <- Out.Position.y; r0.z <- Out.Position.z; r0.w <- Out.Position.w

#line 45
add r2.x, r5.x, cb0[8].x  // r2.x <- Out.Tex.x
add r2.y, r5.y, cb0[8].y  // r2.y <- Out.Tex.y

#line 46
mov o0.xyzw, r0.xyzw
mov o1.xy, r2.xyxx
mov o2.xyzw, r1.xyzw
emit 

#line 51
cut 

#line 54
ret 
// Approximately 101 instruction slots used
